let char_eq = {
  fn (c1 : Char, c2 : Char) ->
  do s1 <- ! char_to_str c1;
  do s2 <- ! char_to_str c2;
  ! str_eq s1 s2
};

let ifC = {
  fn (b' : Thunk(Ret(Bool)), thn : Thunk(Ret(Char)), els: Thunk(Ret(Char))) ->
  do b <- ! b';
  match b
  | True()  -> ! thn
  | False() -> ! els
};

let ifI = {
  fn (b' : Thunk(Ret(Bool)), thn : Thunk(Ret(Int)), els: Thunk(Ret(Int))) ->
  do b <- ! b';
  match b
  | True()  -> ! thn
  | False() -> ! els
};

let ifOS = {
  fn (b' : Thunk(Ret(Bool)), thn : Thunk(OS), els: Thunk(OS)) ->
  do b <- ! b';
  match b
  | True()  -> ! thn
  | False() -> ! els
};


# String -> Ret(Char)
let find_match = {
  fn (s: String) ->
  do l <- ! str_length s;
  do lDiv2 <- ! div l 2;
  # for i, j in 0..lDiv2 - 1
  (let rec loop : Int -> Int -> Ret(Char) = (
    fn (i: Int, j: Int) ->
      # if i is past, done
      ! ifC { ! int_eq i lDiv2}
      { ret '$' }
      { ! ifC { ! int_eq j lDiv2}
        { do i' <- ! add i 1;
          ! loop i' 0 }
        { # i and j are in bounds
          do ci <- ! str_index s i;
          do j' <- ! add j lDiv2;
          do cj <- ! str_index s j';
          ! ifC { ! char_eq ci cj }
          { ret ci }
          { do j' <- ! add j 1;
            ! loop i j' }
        }
        }
  );
  ! loop 0 0
  )
};

let priority = {
  fn (c: Char) ->
  do i <- ! char_to_int c;
  ! ifI { ! int_lt i 91 }
  # uppercase, subtract code for 'A': 
  { do ix <- ! sub i 65;
    ! add ix 27 }
  # lowercase, 
  { do ix <- ! sub i 97;
    ! add ix 1 
  }
};

let write_int = {
  fn (i: Int, done: Thunk(OS)) ->
  do s <- ! int_to_str i;
  ! write_line s done
};

let rec loop : Int -> OS = (
  fn (sum: Int) ->
  ! read_line { fn (s: String) ->
  ! ifOS { ! str_eq s "" }
  { ! write_int sum { ! exit 0 }}
  { do c <- ! find_match s;
    do p <- ! priority c;
    # ! write_int p {
    do sum <- ! add p sum;
    # ! write_int sum {
      ! loop sum
    # }
    # }
  }
  }
);

! loop 0